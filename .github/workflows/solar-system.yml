name: Solar System Workflow

on: 
  workflow_dispatch: 
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v3
        with:
          node-version: 20

        
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install
    
      - name: Unit Testing
        id: nodejs-unit-testing
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-test-result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    container: 
      image: node:20
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: 
          --name mongo

    env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      #- name: Setup NodeJS Version
       # uses: actions/setup-node@v3
       # with:
        #  node-version: 20

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Coverage Result
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions: 
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{vars.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: GHCR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{secrets.GITHUB_TOKEN}}
  

      - name: Build and test
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME}}/solar.system:${{github.sha}}
      

      - name: Docker image test
        run: |
          docker images
          docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKER_USERNAME}}/solar.system:${{ github.sha}}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo "Container IP: $IP"

        
      - name: Container Registry and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ${{ vars.DOCKER_USERNAME}}/solar.system:${{github.sha}}
            ghcr.io/${{ github.repository_owner}}/solar.system:${{github.sha}}


  dev-deploy:
       needs: docker
       runs-on: ubuntu-latest
       steps:
        - name: checkout
          uses: actions/checkout@v4

        - name: Install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
             version: 'v1.26.0'
             
             
        - name: fetch kubernetes cluster
          run: |
            kubectl version --short 
            echo ------------------------------
            kubectl get nodes
             



